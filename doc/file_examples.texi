@node `.fms' File Examples, Lisp Examples, Reference, Top
@chapter `.fms' File Examples

@set fileexs
@ifset fileexs
This section shows how to use FOMUS's native file format to create and edit scores.
@end ifset
@ifset lispexs
This section shows how to create scores in Lisp.
@end ifset
@ifset salexs
This section shows how to create scores with SAL code in Common Music.
@end ifset
It is also a reference for all of FOMUS's basic features and operations.
Use the table of contents and the @ref{Examples Index} to help locate examples that show you how to do what you want.

@ifset lispexs
In all of the examples the @code{*filename*} variable is set to an output filename before
the code is executed.
@end ifset
@ifset salexs
In all of the examples the @code{*filename*} variable is set to an output filename before
the code is executed.
@end ifset

@ifset fileexs
@menu
* `.fms' File Features::        
* Settings (File)::             
* Voices Chords and Polyphony (File)::  
* Articulation Markings (File)::  
* Spanner Marks (File)::        
* Staves and Clef Signatures (File)::  
* Mark Events (File)::          
* Grace Notes (File)::          
* Tuplets (File)::              
* Instruments (File)::          
* Percussion (File)::           
* Beats and Measures (File)::   
* Treating Multiple Parts as One (File)::  
* Score Layout (File)::         
* Microtonal Notation (File)::  
@end menu

@node `.fms' File Features, Settings (File), `.fms' File Examples, `.fms' File Examples
@section `.fms' File Features
@exindex .fms file
@exindex input file

The @ref{Tutorial} section already gives an introduction to @file{.fms} files.  The following examples summarize the syntax of `.fms' files
and introduce extra features designed to make these files more flexible and easier to edit.

@subsection Comments
@exindex comments
@exindex .fms file comments
@exindex input file comments

These are comments.

@fomusex{Comments, Ex, ex, fms, 007}

@subsection General Syntax
@exindex syntax
@exindex .fms file syntax
@exindex input file syntax
@exindex assignments
@exindex mappings
@exindex numbers
@exindex integers
@exindex rational numbers
@exindex floating point numbers
@exindex strings
@exindex symbols
@exindex boolean values
@exindex yes/no values
@exindex lists

The syntax for setting and parameter assignments is pretty flexible.  
You can use a @samp{=}, @samp{:} or nothing at all between the setting/parameter id and its assigned value.
To append to a list or replace entries in a mapping from strings to values, use a plus sign (i.e., use @samp{+=}, @samp{+:} or @samp{+}).  

Strings can be surrounded by single or double quotes.  If there are no characters that could be confused with the string's surrounding context
(e.g., @samp{,}, @samp{)}, @samp{=}, etc.) then quotes aren't necessary.  
A double quote inside a double-quoted string is specified with @samp{\"}, a single quote inside a single-quoted
string is specified with @samp{\'}, and a space in an unquoted string is specified with @samp{\ }.
Also, a tab character is specifed with @samp{\t} and a newline with @samp{\n}.

Lists are enclosed in @samp{(} and @samp{)}.  Object definitions are enclosed in @samp{<} and @samp{>}.  Lists can optionally contain commas to separate elements.
Setting/value pairs in object definitions can also be delimited by commas to assist readability.
If a list is described in the documentation as a ``mapping'' from strings to values, then the string/value pairs can also be specified as assignments
(i.e., using @samp{=} or @samp{:}) and delimited by commas.

Floating point numbers always have a decimal point in them while integers, rationals and mixed numbers don't.

The example below demonstrates the variety of options described above.  

@fomusex{Syntax, Ex, ex, fms, 008}

@subsection Abbreviations
@exindex abbreviations
@exindex .fms file abbreviations
@exindex input file abbreviations

Many parameters and symbols have abbreviations, as shown below.

@fomusex{Abbreviations, Ex, ex, fms, 046}

@subsection Note Events
@exindex events
@exindex note events
@exindex .fms file note events
@exindex input file note events

Note events are created by specifying the values of parameters, settings and marks and ``entering'' the note with a @samp{;}.
One note event is created for each @samp{;} encountered in the file.
To specify a rest or mark event, include the symbol @code{rest} or @code{mark} before the @samp{;} (the symbol @code{note} is also valid but unnecessary).

@fomusex{Note Events, Ex, ex, fms, 010}

@subsection Marks
@exindex marks
@exindex .fms file marks
@exindex input file marks

Marks are specified by enclosing the mark symbol within a @samp{[} and @samp{]}.  If the mark requires an argument, 
it is also included within the brackets and separated from the mark symbol by a space or comma.

@fomusex{Marks, Ex, ex, fms, 011}

@subsection ``Sticky'' Values
@exindex sticky values
@exindex .fms file sticky values
@exindex input file sticky values

When the values of the following parameters are set, they ``stick'' until the next time they are set in the file:
@code{time}, @code{duration}, @code{pitch}, @code{part}, @code{voice}, @code{dynamic} and @code{grace}.
When FOMUS encounters a @samp{;}, a note event is constructed from these arguments in whatever current states they are in.
This allows you to represent constructs such as chords and melodies more efficiently and in a style that's easier to read
than when all parameters are specified for each individual note.  

@fomusex{Sticky Values, Ex, ex, fms, 003}

@code{grace} behaves in a special manner.  Whenever @code{time} is set to some value, @code{grace} is ``reset'' (i.e., the next note
isn't a grace note until another @code{grace} value is encountered).  As long as @code{time} isn't given a value, @code{grace} behaves
in a sticky manner like all of the other arguments.

@fomusex{Sticky Grace Values, Ex, ex, fms, 004}

Marks don't behave stickily.  The entire set of marks must be specified for each individual note.
Setting assignments are also not sticky---like marks, they must appear in each individual note.
If you need to specify marks and settings for large groups of notes, define a region (see below for an example).

@subsection Time Increments
@exindex .fms file time increments
@exindex input file time increments
@exindex time increments
@exindex increments

A @samp{+} following the @code{time} parameter is an instruction to increment the time by the last duration value.
@samp{+} can also be used to increment ``grace time'' in the same way.

@fomusex{Time Increments, Ex, ex, fms, 001}

@subsection Extending Time/Duration
@exindex extending time/duration
@exindex duration/time extension
@exindex time/duration extension
@exindex .fms file time/duration extension
@exindex input file time/duration extension

A @samp{+} following the @code{duration} parameter is an instruction to set the duration of the note so that it ends where the next note begins
in the same voice.  A @samp{-} following a @code{duration} parameter is an instruction to end the note at the given time, and place the onset
at the end time of the previous note in the same voice.

@fomusex{Time Extensions, Ex, ex, fms, 002}

@subsection Regions
@exindex regions
@exindex .fms file regions
@exindex input file regions

@samp{@{} and @samp{@}} are used to surround a group of entries and modify them in some way.
A region beginning with @samp{time +4 @{}, for example, increments all of the time values in the region by 4.
For @code{time}, @code{grace} @code{duration} and @code{dyn}, any one of @samp{+}, @samp{-}, @samp{*} and @samp{/} can be used (i.e., times, durations and dynamics
can be scaled using @samp{*} and @samp{/} as well as incremented using @samp{+} and @samp{-}).  
It's important to note that if you scale time with a region specification like @samp{time *2 @{} or @samp{time /2 @{}, 
this @emph{only} scales @code{time} values, not duration values.  For example, @samp{time *2 @{} should usually be accompanied by @samp{dur *2 @{}
to produce the effect you probably want.
@code{pitch} may be modified with @samp{+} or @samp{-} but not scaled like @code{time} and @code{dur}.

@code{voice} can be altered by specifying a voice or list of voices to add or subtract from all of the enclosed note events.
For example, @code{voice +2 @{} means voice 2 is an additional choice for all enclosed note events (2 is added to each event's list of voices) while
@samp{voice -2 @{} means voice 2 is never a choice regardless of what is specified in each note event (2 is removed from each event's list of voices). 
@samp{voice 2 @{} means simply set all enclosed events to voice 2.
Mark regions can also be defined, and behave in a manner similar to voice regions.
For example, @samp{[.] @{} or @samp{+[.] @{} means a staccato mark is added to all enclosed note events while
@samp{-[.] @{} means staccato marks are removed from all enclosed note events regardless of whether or not they are specified in individual notes.

@fomusex{Regions, Ex, ex, fms, 005}

Some of the regions in the example above are nested.  When numerical values like @code{time} or @code{pitch} are being modified, the effects accumulate.  
When lists of things (like voices or marks) are being modified inner regions take precendence over the outer ones.
Regions can also overlap.  To specify which @samp{@{} belongs to which @samp{@}} you must attach matching tag strings to them
(e.g., @samp{a@{} would match @samp{@}a} and @samp{foo@{} would match @samp{@}foo}).
Also, a region extending to the end of the file can be defined with an alternate syntax using @samp{..} or @samp{...}
instead of @samp{@{} (e.g., @samp{time +1 ...}).

@fomusex{Nested and Overlapping Regions, Ex, ex, fms, 006}

Settings can also be specified for groups of notes using regions.  In the following example @code{staff} is set to 1
for the first four note entries and 2 for the next four.  The @samp{time 0} is necessary to tell FOMUS that the following
@samp{staff = 1} is not a score-level setting (which must appear before anything else in the file) but a note event setting (see @ref{Settings (File)}).

@fomusex{Settings in Regions, Ex, ex, fms, 016}

@subsection Note/Rhythm Symbols
@exindex note/rhythm symbols
@exindex rhythm/note symbols
@exindex .fms file note/rhythm symbols
@exindex input file note/rhythm symbols

Notes and durations can be specified symbolically using strings in @file{.fms} files.
A pitch symbol begins with a note letter followed optionally by one or two accidentals (the second accidental is a microtone adjustment) and 
an octave number (middle C is @samp{c4}).  If the octave number is omitted, the pitch closest to the last specified pitch is used.
It is important to note that by specifying pitches this way you are not specifying notation (i.e., @samp{cs4} could turn out to be a C-sharp, D-flat or
B-doublesharp in the score regardless of the @samp{s} in the symbol), they are only a convenient way of representing numeric values.  To actually force FOMUS
to use a sharp, you would have to use the @code{acc} setting.

Duration symbols consist of a base string (e.g., @samp{q} signifies a quarter note, @samp{e} signifies an eighth note, etc.), a dot or double-dot symbol, and an optional
tuplet modifier (e.g., @samp{t} multiplies the value by 2/3, @samp{q} multiplies the value by 4/5, etc.).  The symbol may also be followed by a tie
(the @samp{+}, @samp{_} or @samp{~} characters can be used) and another duration symbol, in which case the two duration values are added together.
Like pitch symbols, rhythmic symbols map strictly to FOMUS time values and don't necessarily signify the rhythmic spelling of the note.
For example, the default symbol @samp{s} specifies a sixteenth note only when the @code{beat} setting is set to 1/4 (1 beat equals 1 quarter note---see @ref{setBeat}).
If you change the value of @code{beat} to 1/8, @samp{s} outputs a 32nd note instead since it still represents 1/4 of a beat.
(The reason for this discrepancy is that, under some conditions, it would be impossible for FOMUS to determine proper event times and durations
if logical values are mixed with notation symbols.)

@fomusex{Pitch and Duration Symbols, Ex, ex, fms, 018}

The settings @code{note-symbols}, @code{note-accs}, @code{note-microtones} and @code{note-octaves} contain all of the information for parsing notes while
@code{dur-symbols}, @code{dur-dots}, @code{dur-tie} and @code{tuplet-symbols} contain information for parsing durations.  
Look up the values of these settings to see all of the options available for constructing symbols, or customize them if the default values are insufficient.
The following example shows how to do this:

@fomusex{Custom Pitch and Duration Symbols, Ex, ex, fms, 019}

These settings also affect the appearance of symbols printed by the online documentation.

@subsection Including Other Files
@exindex include file
@exindex .fms file include file
@exindex input file include file

To include another file, use the @code{include} instruction shown in the example below.
Files may be included at any location, and can be in any format that FOMUS recognizes (e.g., a MIDI file).

@fomusex{Including the Comments Example, Ex, ex, fms, 012}

@subsection Macros
@exindex macros
@exindex .fms file macros
@exindex input file macros

Macros are text strings that can be inserted at any arbitrary location in the file.
They are defined with the @code{macro} keyword followed by a string that specifies the name of the macro,
a list of positional parameters, and finally a string that represents the macro body or replacement text.  The @samp{@@} character followed by the
name of a parameter indicates that the appropriate argument is inserted at this location.  Once the macro is defined, it may be invoked using the macro name
followed by a list of arguments.  The number of arguments must match the number of parameters in the macro definition.

@fomusex{Macros, Ex, ex, fms, 017}

All arguments are passed as strings.
Since FOMUS executes macros by simply replacing text in the file, you can pass absolutely anything as an argument.
Complex arguments with spaces, commas and other confusing characters can be passed by enclosing them in quotes.
Also, you must be careful not give a macro the same name as a part, setting or event parameter to avoid potential conflicts.

@end ifset

@ifset lispexs
@c @node Some Basic Lisp Examples
@c @section Some Basic Lisp Examples
@exindex lisp
@exindex @code{with-score} macro

See the Lisp section in @ref{Input} for instructions on how to load the @file{fomus.lisp} and @file{fomus.asd} files installed with FOMUS.  

@file{fomus.lisp} provides a macro @code{fms:with-score} that creates a score object and destroys it when execution goes out of scope.
All FOMUS objects and note events created inside the macro apply to the score that is created by it.
By default, @code{with-score} also processes the score object and creates all specified output files before destroying it 
(to disable this, set @code{:run} to @samp{nil} in the list of keyword/argument pairs at the top).
@c See TODO for the entire @code{with-score} macro syntax.

In this example, the @code{:filename} keyword/value pair sets FOMUS's @code{filename} setting to the output filename 
(the @code{*filename*} variable itself is set to the output filename
before the code is executed).  The @code{:cautaccs} keyword/value pair shows how to specify a score-level setting (cautionary accidentals
are disabled).

@fomusex{@code{with-score} Macro, Lsp, lsp, lisp, 001}

Most of the Lisp examples follow the syntax above.  However, it's possible to handle score objects in different ways.
If you don't use the @code{with-score} macro, then all calls operate on a single global score instance.
The @code{run} function must then be called at the end to process the score.

The following examples show how to notate a score with or without the @code{with-score} macro:

@fomusex{Global Score Object, Lsp, lsp, lisp, 025}
@fomusex{@code{with-score} Macro (Slightly Different), Lsp, lsp, lisp, 014}

A more complex @code{with-score} example follows.  The outermost @code{with-score} assigns the name @samp{main} to the score and
also sets the output filename.  The inner two scores are assigned the names @samp{chunk1} and @samp{chunk2} and are actually
used as containers or temporary storage.  The macro @code{with-scores} makes it more convenient to define multiple score objects by wrapping
multiple definitions in another list.  Since the two ``chunks'' are only used as storage, the @code{:run} argument for these is @samp{nil}.
Inside @code{with-score} @code{with-scores}, the current score may always be specified using @code{with-score} followed by the name of the score
(instead of a definition).  The same @code{blast-notes} function, then, is called each of the two chunks in this example.
The @code{merge} functions at the end merge the two chunks into the main score (at different times) before they go out of scope
and disappear.

@fomusex{Multiple @code{with-score} Macros, Lsp, lsp, lisp, 038}

@subsection Data Types

@include extypes.texi

@end ifset

@ifset salexs
@c @node Some Basic SAL Examples
@c @section Some Basic SAL Examples
@exindex SAL processes

The following SAL code shows a process definition and a sprout command.  The output is sent to FOMUS if the output filename in @code{*filename*} contains an
extension that FOMUS recognizes.  Common Music automatically sets the @code{filename} setting before processing the score.

@fomusex{Process, Sal, sal, sal, 001}

The next example produces the same result without sprouting processes.  
A new score must be created using @code{new-score}, after which all information is entered using function calls.
@code{run} is called at the end to process the score.

@fomusex{Direct, Sal, sal, sal, 026}

@subsection Data Types

@include extypes.texi

@end ifset

@node Settings (File), Voices Chords and Polyphony (File), `.fms' File Features, `.fms' File Examples
@section Settings
@exindex settings

@subsection Score-Level Settings
@exindex score-level settings
@exindex global settings

The following 
@ifset fileexs
example contains
@end ifset
@ifclear fileexs
examples contain 
@end ifclear
three score-level settings, @code{title}, @code{author} and @code{quartertones}, which affect the entire score.
@ifset fileexs
All setting assignments at the top of the file are interpretted as score-level settings.
As soon as anything other than a setting definition is encountered (e.g., an instrument/part definition or the first parameter of a note event),
setting assignments outside of an object definition are interpretted as note event settings.
@end ifset

All settings in FOMUS can be set at the score level.

@ifset fileexs
@fomusex{Score-Level Settings, Ex, ex, fms, 009}
@end ifset
@ifset lispexs
@fomusex{Score-Level Settings, Lsp, lsp, lisp, 034}
@fomusex{Score-Level Settings without @code{with-score}, Lsp, lsp, lisp, 035}
@end ifset
@ifset salexs
@fomusex{Score-Level Settings, Sal, sal, sal, 034}
@fomusex{Score-Level Settings without @code{sprout}, Sal, sal, sal, 035}
@end ifset

@subsection Object Settings
@exindex object settings
@exindex percussion instrument settings
@exindex instrument settings
@exindex part settings

Each list of keyword/argument pairs following the @code{percinsts}, @code{insts} and @code{parts} keywords is the definition for a percussion instrument, instrument or part.
See @ref{Objects} for a better explanation of these objects---the purpose here is only to point out settings.
@code{perc-note} and @code{perc-name} are typical settings for percussion instruments (they specify the note and the text for a percussion change mark).
Because they are set in a percussion instrument definition, they affect only that object and any woodblock percussion note events.
The settings @code{name} and @code{abbr} usually belong in an instrument definition (they are the name and abbreviated name of the instrument).
When they are defined in a part as they are here, they override the definitions that are in the instrument that they are based on.
@code{transpose-part} (whether or not to transpose all of the notes in a part) 
should probably be defined at the score level, but can also exist in instruments or parts (as they are here).
@code{id}, @code{template}, @code{percinsts} (inside the instrument definition) and @code{insts} (inside the part definitions)
aren't really settings---they are special assignments that only affect the instrument or part that they are defined in 
(see @ref{Objects} for complete lists and descriptions of these special parameters).

@ifset fileexs
@fomusex{Object Settings, Ex, ex, fms, 020}
@end ifset
@ifset lispexs
@fomusex{Object Settings, Lsp, lsp, lisp, 027}
@fomusex{Object Settings without @code{with-score}, Lsp, lsp, lisp, 026}
@end ifset
@ifset salexs
@fomusex{Object Settings, Sal, sal, sal, 025}
@fomusex{Object Settings without @code{sprout}, Sal, sal, sal, 027}
@end ifset

@subsection Measure/Note Event Settings
@exindex note settings
@exindex rest settings
@exindex mark settings
@exindex measure settings

This 
@ifset fileexs
example
@end ifset
@ifclear fileexs
pair of examples 
@end ifclear
shows a few settings being defined in measure and note events.
The two settings in the measure definition are @code{comp} (compound meter) and @code{keysig} (key signature), both of which
could be set at the score level or in a part definition instead.
The settings in the note events are @code{staff} (staff number) and @code{acc} (accidental choices), which override any decision FOMUS makes regarding
staff and accidental choices.
@ifset fileexs
They must appear on every note entry or in a region definition (both are shown in the example).
@end ifset
@ifclear fileexs
All other keyword/value pairs (e.g., @code{time}, @code{dur}, @code{pitch}, etc.) are not settings, they are special parameters that belong only to that particular event.
@end ifclear

@ifset fileexs
@fomusex{Measure/Note Settings, Ex, ex, fms, 021}
@end ifset
@ifset lispexs
@fomusex{Measure/Note Settings, Lsp, lsp, lisp, 036}
@fomusex{Measure/Note Settings without @code{with-score}, Lsp, lsp, lisp, 037}
@end ifset
@ifset salexs
@fomusex{Measure/Note Settings, Sal, sal, sal, 036}
@fomusex{Measure/Note Settings without @code{sprout}, Sal, sal, sal, 037}
@end ifset

@node Voices Chords and Polyphony (File), Articulation Markings (File), Settings (File), `.fms' File Examples
@section Voices, Chords and Polyphony
@exindex voices

@subsection Voices
@exindex single voices

Use the @code{voice} parameter to specify a voice (numbering starts at 1 and continues up to 128, more than can possibly fit on a staff).
If you don't specify one, the default value is 1.

If you explicitly assign voices to note events, keep in mind that the lowest voice number is usually the highest on the staff and vice versa.

@ifset fileexs
@fomusex{Voices, Ex, ex, fms, 022}
@end ifset
@ifset lispexs
@fomusex{Voices, Lsp, lsp, lisp, 033}
@end ifset
@ifset salexs
@fomusex{Voices, Sal, sal, sal, 033}
@end ifset

@subsection Polyphony
@exindex multiple voices
@exindex polyphony

FOMUS is given a choice between several voices here by passing a list to the @code{voice} parameter.

@ifset fileexs
@fomusex{Polyphony 1, Ex, ex, fms, 023}
@end ifset
@ifset lispexs
@fomusex{Polyphony 1, Lsp, lsp, lisp, 007}
@end ifset
@ifset salexs
@fomusex{Polyphony 1, Sal, sal, sal, 007}
@end ifset

@ifset fileexs
@fomusex{Polyphony 2, Ex, ex, fms, 024}
@end ifset
@ifset lispexs
@fomusex{Polyphony 2, Lsp, lsp, lisp, 013}
@end ifset
@ifset salexs
@fomusex{Polyphony 2, Sal, sal, sal, 013}
@end ifset

@subsection Chords
@exindex chords
@exindex maximum chord size
@exindex vertical maximum
@exindex simultaneous notes

Chords are formed when simultaneous or overlapping notes exist in a single voice.
In the following example, FOMUS finds it appropriate to create chords in one voice even though it is given a choice:

@ifset fileexs
@fomusex{Chords 1, Ex, ex, fms, 025}
@end ifset
@ifset lispexs
@fomusex{Chords 1, Lsp, lsp, lisp, 005}
@end ifset
@ifset salexs
@fomusex{Chords 1, Sal, sal, sal, 005}
@end ifset

In this example, FOMUS is forced to fit everything into one voice.
FOMUS has no choice but to form chords in this case.

@ifset fileexs
@fomusex{Chords 2, Ex, ex, fms, 026}
@end ifset
@ifset lispexs
@fomusex{Chords 2, Lsp, lsp, lisp, 006}
@end ifset
@ifset salexs
@fomusex{Chords 2, Sal, sal, sal, 006}
@end ifset

FOMUS uses a setting called @code{vertmax} to determine the
maximum number of notes allowed in a chord.  For most instruments the appropriate value is 1.
FOMUS needs this information when it chooses voices so that it doesn't notate passages
that are impossible to play.
The place to put @code{vertmax} is in an instrument or part definition, though it may also be changed for
individual measures or notes.

In the following example, setting @code{vertmax} to 1 in the part definition overrides the default of 5 that is defined in the instrument.
This forces the output to consist of two individually monophonic voices.

@ifset fileexs
@fomusex{@code{vertmax} Setting, Ex, ex, fms, 027}
@end ifset
@ifset lispexs
@fomusex{@code{vertmax} Setting, Lsp, lsp, lisp, 032}
@end ifset
@ifset salexs
@fomusex{@code{vertmax} Setting, Sal, sal, sal, 032}
@end ifset

@node Articulation Markings (File), Spanner Marks (File), Voices Chords and Polyphony (File), `.fms' File Examples
@section Articulation Markings
@exindex marks
@exindex articulation markings

@subsection Single Note Marks
@exindex single note marks
@exindex staccato marks
@exindex accent marks
@exindex text marks

@ifset fileexs
Marks are entered by enclosing them in brackets.  They must appear separately in each location where they are to appear in the score (i.e., marks don't
``stick'' in the same way that parameters such as @code{time} or @code{pitch} do).
@end ifset
@ifclear fileexs
Marks are entered as strings.  They are attached to a note event via the @code{marks} parameter.
@end ifclear

@ifset fileexs
@fomusex{Articulation, Ex, ex, fms, 028}
@end ifset
@ifset lispexs
@fomusex{Articulation, Lsp, lsp, lisp, 002}
@end ifset
@ifset salexs
@fomusex{Articulation, Sal, sal, sal, 002}
@end ifset

@ifset fileexs
Custom text marks are entered by enclosing an @code{x}, @code{x^}, @code{x_} or @code{x!} mark with the text to appear in the score.
@end ifset
@ifclear fileexs
Custom text marks are entered by enclosing an @code{x}, @code{x^}, @code{x_} or @code{x!} mark in a list with the text to appear in the score.
@end ifclear
@code{x} places the text at the notehead, @code{x^} and @code{x_} force the text to appear above or below the note in italics, and @code{x!} places
the text in bold face above the staff.

@ifset fileexs
@fomusex{Text Marks, Ex, ex, fms, 047}
@end ifset
@ifset lispexs
@fomusex{Text Marks, Lsp, lsp, lisp, 039}
@end ifset
@ifset salexs
@fomusex{Text Marks, Sal, sal, sal, 038}
@end ifset

FOMUS has many built in text marks that can be customized using the @code{default-mark-texts} and @code{mark-texts} settings.
The following example uses @code{mark-texts} to change the appearance of the @code{vib} and @code{moltovib} text marks
(by default, FOMUS uses the texts ``vib.'' and ``molto vib.'').

@ifset fileexs
@fomusex{More Text Marks, Ex, ex, fms, 048}
@end ifset
@ifset lispexs
@fomusex{More Text Marks, Lsp, lsp, lisp, 040}
@end ifset
@ifset salexs
@fomusex{More Text Marks, Sal, sal, sal, 039}
@end ifset

If you wanted to make this the default appearance for these two marks, you could insert the following line in your @file{.fomus} file
located in your home directory (make sure you use @samp{+=} instead of @samp{=} to append the values to FOMUS's default list):

@example
default-mark-texts += (vib "vibrato", moltovib "molto vibrato")
@end example

@node Spanner Marks (File), Staves and Clef Signatures (File), Articulation Markings (File), `.fms' File Examples
@section Spanner Marks
@exindex slurs
@exindex wedges
@exindex crescendo wedges
@exindex decrescendo wedges
@exindex spanner marks
@exindex begin marks
@exindex end marks

``Spanner marks'' are marks that span across one or more notes in score.
Examples are slurs, crescendo/decrescendo wedges and text marks followed by dashed lines.
There are several ways of entering these types of marks, all of which involve the use of either a begin, end, or ``continue'' mark.
A ellipsis with two dots (@samp{..}) (or single dots in the case of a continue mark) is used to denote which part of the spanner a mark represents---for example,
@code{(..}, @code{..)} and @code{.(.} are the begin, end and continue marks of a slur.

A straightforward method of specifying spanner marks is to indicate where they start and stop.
In this example, @code{(..} and @code{..)} marks are used to signify the beginnings and ends of slurs:

@ifset fileexs
@fomusex{Slurs, Ex, ex, fms, 049}
@end ifset
@ifset lispexs
@fomusex{Slurs, Lsp, lsp, lisp, 041}
@end ifset
@ifset salexs
@fomusex{Slurs, Sal, sal, sal, 040}
@end ifset

Only the begin marks are given in the next example.  
In this example, each end occurs before the beginning of the next slur or on the very last note if there is no next slur.
Slurs spanning only a single note are removed (though they may still affect the placement of other slurs).
FOMUS considers each voice separately when calculating spanners (with the exception of a few marks like octave change signs,
which need to be calculcated separately for each staff).

@ifset fileexs
@fomusex{Slurs using Begin Marks, Ex, ex, fms, 029}
@end ifset
@ifset lispexs
@fomusex{Slurs using Begin Marks, Lsp, lsp, lisp, 004}
@end ifset
@ifset salexs
@fomusex{Slurs using Begin Marks, Sal, sal, sal, 004}
@end ifset

End marks may also be used by themselves:

@ifset fileexs
@fomusex{Slurs using End Marks, Ex, ex, fms, 050}
@end ifset
@ifset lispexs
@fomusex{Slurs using End Marks, Lsp, lsp, lisp, 042}
@end ifset
@ifset salexs
@fomusex{Slurs using End Marks, Sal, sal, sal, 041}
@end ifset

@subsection Modifying Spanner Mark Behavior
@exindex wedges
@exindex crescendo wedges
@exindex decrescendo wedges
@exindex spanner marks
@exindex flags
@exindex mark flags
@exindex begin marks
@exindex end marks

By default, spanner marks do not touch, span rests or span across single notes.
This behavior can be changed at any level (in a note, measure, part or the entire score) with settings.
The settings controlling default slur behavior, for example, are @code{slurs-canspanrests} and @code{slurs-cantouch}.

@ifset fileexs
@fomusex{Touching Slurs, Ex, ex, fms, 051}
@end ifset
@ifset lispexs
@fomusex{Touching Slurs, Lsp, lsp, lisp, 043}
@end ifset
@ifset salexs
@fomusex{Touching Slurs, Sal, sal, sal, 042}
@end ifset

Individual spanner behavior can also be changed by appending character ``flags'' to the mark ids.  Appending an @samp{r}, for example, indicates
that the mark can span rests @samp{n} indicates it should span notes only.  @samp{1} indicates that the mark can span a single note, while
@samp{m} indicates it can only span multiple notes. The example below uses @samp{-} and @samp{|} to indicate whether the slurs can touch or not.
Not all of these flags are valid for every spanner mark (you cannot append @samp{1} or @samp{m} to slur marks, for example).

@ifset fileexs
@fomusex{Marks with Flags, Ex, ex, fms, 052}
@end ifset
@ifset lispexs
@fomusex{Marks with Flags, Lsp, lsp, lisp, 044}
@end ifset
@ifset salexs
@fomusex{Marks with Flags, Sal, sal, sal, 043}
@end ifset

The following example shows how crescendo/decrescendo wedges can be made to span single notes.
@code{wedges-cantouch} is also set to allow the marks to begin and end on the same note.

@ifset fileexs
@fomusex{Wedges, Ex, ex, fms, 053}
@end ifset
@ifset lispexs
@fomusex{Wedges, Lsp, lsp, lisp, 045}
@end ifset
@ifset salexs
@fomusex{Wedges, Sal, sal, sal, 044}
@end ifset

The beginnings and ends of these spanner marks are attached to noteheads.
A few spanners, like crescendo/decrescendo wedges, can be ``detached'' or separated from noteheads and appear independently in the score.
See @exref{Mark Events} for examples of how to do this.

@subsection Continue Marks
@exindex slurs
@exindex spanner marks
@exindex continue marks

Another way to specify where spanners begin and end is to use ``continue'' marks.
@ifset lispexs
Continue marks simplify specifying spanners in programming environments such as Lisp.
@end ifset
@ifset salexs
Continue marks simplify specifying spanners in programming environments such as SAL.
@end ifset
To use them, place a continue mark over every note event that falls under a spanner and, if necessary, include begin or end marks
to resolve any ambiguities.  FOMUS places begin or end marks where they are missing at the beginnings or ends of any
contiguous set of continue marks within a single voice.

Continue marks are indicated by surrounding the base spanner mark symbol with two dots, one on either side.
For example, @code{.(.} signifies a slur continue mark while @code{.<.} signifies a crescendo continue mark.

@ifset fileexs
@fomusex{Continue Marks, Ex, ex, fms, 057}
@end ifset
@ifset lispexs
@fomusex{Continue Marks, Lsp, lsp, lisp, 049}
@end ifset
@ifset salexs
@fomusex{Continue Marks, Sal, sal, sal, 048}
@end ifset

@node Staves and Clef Signatures (File), Mark Events (File), Spanner Marks (File), `.fms' File Examples
@section Staves and Clefs Signatures

@subsection Selecting Staves
@exindex staves
@exindex forcing staves
@exindex specifying staves

Use the @code{staff} setting to override FOMUS's choice of staves.  Staff numbering begins with 1, representing the highest staff in the part.

@ifset fileexs
@fomusex{Staves, Ex, ex, fms, 030}
@end ifset
@ifset lispexs
@fomusex{Staves, Lsp, lsp, lisp, 022}
@end ifset
@ifset salexs
@fomusex{Staves, Sal, sal, sal, 022}
@end ifset

@ifset fileexs
@code{staff} is unlike @code{voice} in that @code{staff} is a setting while @code{voice} is an input parameter like @code{time} or @code{pitch}.  
This means that if you want to influence the staff placement of individual notes you must include @code{staff} in every event where you want to force the choice.
@end ifset

@subsection Clefs Signatures
@exindex clef signatures
@exindex forcing clef signatures
@exindex specifying clef signatures

Use the @code{clef} setting to override FOMUS's clef signature choice.
@ifset fileexs
Like @code{staff} if you want to influence the clef signature for individual notes you must include @code{clef} in every note event where you want to force the choice.
@end ifset

@ifset fileexs
@fomusex{Clefs, Ex, ex, fms, 069}
@end ifset
@ifset lispexs
@fomusex{Clefs, Lsp, lsp, lisp, 061}
@end ifset
@ifset salexs
@fomusex{Clefs, Sal, sal, sal, 060}
@end ifset

@node Mark Events (File), Grace Notes (File), Staves and Clef Signatures (File), `.fms' File Examples
@section Mark Events
@exindex mark events

@subsection Single Note Marks
@exindex single note marks
@exindex articulation markings
@exindex staccato marks
@exindex accent marks

Mark events provide a way to specify marks as independent objects, separate from note or rest events.
The marks specified in mark events are attached to the notes they overlap with when FOMUS processes them.
For example, a mark event with a time of 2, a duration of 4 and a staccato mark places staccato marks on all notes between times 2 and 6.
A single mark events can also represent a spanner object like a slur or phrase mark.
Also, a few spanner marks can be inserted into the score independent of note events,
allowing, for example, crescendo/decrescendo wedges to start or end at locations other than where notes appear.

The following shows how to add articulation marks and note events separately.
The mark events are given durations of 1/2 so that they each overlap precisely with one note event.

@ifset fileexs
@fomusex{Mark Events, Ex, ex, fms, 031}
@end ifset
@ifset lispexs
@fomusex{Mark Events, Lsp, lsp, lisp, 008}
@end ifset
@ifset salexs
@fomusex{Mark Events, Sal, sal, sal, 008}
@end ifset

If the mark event duration overlaps with more than one note event, than the articulation is applied to all of them.

@ifset fileexs
@fomusex{Large Duration Mark Events, Ex, ex, fms, 055}
@end ifset
@ifset lispexs
@fomusex{Large Duration Mark Events, Lsp, lsp, lisp, 047}
@end ifset
@ifset salexs
@fomusex{Large Duration Mark Events, Sal, sal, sal, 046}
@end ifset

The voice or voices of a mark event determine to which voice the marks are applied:

@ifset fileexs
@fomusex{Voices in Mark Events, Ex, ex, fms, 056}
@end ifset
@ifset lispexs
@fomusex{Voices in Mark Events, Lsp, lsp, lisp, 048}
@end ifset
@ifset salexs
@fomusex{Voices in Mark Events, Sal, sal, sal, 047}
@end ifset

Marks events can also have ``point'' durations of 0, which can only overlap with a single note event (or chord).

@ifset fileexs
@fomusex{0 Duration Mark Events, Ex, ex, fms, 054}
@end ifset
@ifset lispexs
@fomusex{0 Duration Mark Events, Lsp, lsp, lisp, 046}
@end ifset
@ifset salexs
@fomusex{0 Duration Mark Events, Sal, sal, sal, 045}
@end ifset

@subsection Spanner Marks
@exindex spanner marks
@exindex slurs
@exindex crescendo wedges
@exindex decrescendo wedges
@exindex detached spanner marks

Mark events that contain begin or end marks insert the marks into the first and last note events that are overlapped by the mark event.
This effectively creates a spanner that spans the duration (or approximate duration) of the mark event.

@ifset fileexs
@fomusex{Spanners in Mark Events, Ex, ex, fms, 059}
@end ifset
@ifset lispexs
@fomusex{Spanners in Mark Events, Lsp, lsp, lisp, 051}
@end ifset
@ifset salexs
@fomusex{Spanners in Mark Events, Sal, sal, sal, 050}
@end ifset

When you specify certain spanners such as crescendo/decrescendo wedges with mark events, they are placed in the score ``detached'' from note events.
In other words, the beginnings and ends of spanners entered this way don't necessarily correspond to the locations of note events.
FOMUS accomplishes this by placing the detached spanner marks in an extra, invisible voice in the output file.
This behavior can be turned off using the @code{detach} setting.

@ifset fileexs
@fomusex{Detached Spanners, Ex, ex, fms, 060}
@end ifset
@ifset lispexs
@fomusex{Detached Spanners, Lsp, lsp, lisp, 052}
@end ifset
@ifset salexs
@fomusex{Detached Spanners, Sal, sal, sal, 051}
@end ifset

@subsection Altering Mark Event Overlap Behavior
@exindex mark event overlap behavior
@exindex overlap behavior

By default, a mark event must at least partially overlap a note event for that note event to receive a mark.
This behavior can be changed via the settings @code{left} and @code{right}, which correspond to the onset and offset of a mark event.  
Either setting can be set to @samp{touch}, @samp{overlap} or @samp{include}
to specify that a mark event inserts marks into note events that either touch, overlap, or are completely enclosed within.
(These settings don't affect mark events with 0 durations.)

@ifset fileexs
@fomusex{Changing Overlap Behavior, Ex, ex, fms, 058}
@end ifset
@ifset lispexs
@fomusex{Changing Overlap Behavior, Lsp, lsp, lisp, 050}
@end ifset
@ifset salexs
@fomusex{Changing Overlap Behavior, Sal, sal, sal, 049}
@end ifset

@node Grace Notes (File), Tuplets (File), Mark Events (File), `.fms' File Examples
@section Grace Notes
@exindex grace notes

@subsection Specifying Grace Notes
@exindex appoggiaturas
@exindex acciaccaturas
@exindex slashes
@exindex grace note slashes

Grace notes are created by supplying a value to the @code{grace} parameter.
The @code{time}, @code{grace} and @code{duration} parameters together determine where the grace note appears and how it is spelled rhythmically.
@code{time} indicates the time of the event @emph{before} which the grace note appears 
(grace notes with the same @code{time} are beamed together as a group).
@code{grace} can be thought of as a pseudo-time ``within'' the normal time specified by @code{time}.
For example, grace notes with earlier @code{grace} values appear before grace notes with later @code{grace} values,
and grace notes with equivalent @code{grace} values are grouped into chords.
@code{duration} in the context of a grace note is interpreted in a manner consistent with normal note durations.
For example, if a @code{duration} of 1/2 is normally notated as an eighth note (the default behavior), 
a grace note with a @code{duration} of 1/2 is also notated as a (small-sized) eighth note.

In the example below, the @code{time} values of the grace notes determine which quarter notes they appear in front of.
@code{grace} values in each group begin at 0 and increment by the value of @code{duration}, 
which in this case is always 1/4 (a sixteenth note).
@ifset fileexs
To ``reset' the @code{grace} parameter and indicate that a normal (non-grace) note is to be entered,
the @code{time} parameter is reiterated without a @code{grace} parameter.
@end ifset

@ifset fileexs
@fomusex{Grace Notes, Ex, ex, fms, 032}
@end ifset
@ifset lispexs
@fomusex{Grace Notes, Lsp, lsp, lisp, 019}
@end ifset
@ifset salexs
@fomusex{Grace Notes, Sal, sal, sal, 019}
@end ifset

The following example includes slash marks, and also shows that FOMUS still outputs consecutive grace notes
despite the different @code{grace} values given (they don't begin at 0 and increment by 1).
(The slashes only appear on the single grace notes.)

@ifset fileexs
@fomusex{Grace Notes with Slashes, Ex, ex, fms, 061}
@end ifset
@ifset lispexs
@fomusex{Grace Notes with Slashes, Lsp, lsp, lisp, 053}
@end ifset
@ifset salexs
@fomusex{Grace Notes with Slashes, Sal, sal, sal, 052}
@end ifset

Grace note chords are shown in the following example:

@ifset fileexs
@fomusex{Grace Note Chords, Ex, ex, fms, 062}
@end ifset
@ifset lispexs
@fomusex{Grace Note Chords, Lsp, lsp, lisp, 054}
@end ifset
@ifset salexs
@fomusex{Grace Note Chords, Sal, sal, sal, 053}
@end ifset

@node Tuplets (File), Instruments (File), Grace Notes (File), `.fms' File Examples
@section Tuplets
@exindex tuplets

@subsection Tuplet Durations
@exindex minimum tuplet duration
@exindex maximum tuplet duration
@exindex tuplet minimum/maximum duration

You can set the minimum and maximum duration a tuplet is allowed to span with @code{min-tupletdur} and @code{max-tupletdur}.
They are set here as part of the measure definitions because they can't be set at the note level.

@ifset fileexs
@fomusex{Minimum and Maximum Tuplet Durations, Ex, ex, fms, 070}
@end ifset
@ifset lispexs
@fomusex{Minimum and Maximum Tuplet Durations, Lsp, lsp, lisp, 062}
@end ifset
@ifset salexs
@fomusex{Minimum and Maximum Tuplet Durations, Sal, sal, sal, 061}
@end ifset

@subsection Forcing Tuplets
@exindex forcing tuplets
@exindex specifying tuplets
@exindex tuplet marks
@exindex tuplet duration
@exindex tuplet ratio

The @code{tup..} and @code{..tup} marks force FOMUS to begin and end a tuplet at those locations, even if it
breaks FOMUS's rules determining where tuplets are allowed to occur.  
The example below uses begin marks to force FOMUS to only begin tuplets at those locations.

@ifset fileexs
@fomusex{Tuplet Begin and End Marks, Ex, ex, fms, 034}
@end ifset
@ifset lispexs
@fomusex{Tuplet Begin and End Marks, Lsp, lsp, lisp, 021}
@end ifset
@ifset salexs
@fomusex{Tuplet Begin and End Marks, Sal, sal, sal, 021}
@end ifset

You can also use the @code{tupletdur} and @code{tupletrat} settings to fix the duration or ratio of the tuplet:

@ifset fileexs
@fomusex{Tuplet Durations, Ex, ex, fms, 033}
@end ifset
@ifset lispexs
@fomusex{Tuplet Durations, Lsp, lsp, lisp, 020}
@end ifset
@ifset salexs
@fomusex{Tuplet Durations, Sal, sal, sal, 020}
@end ifset

It's best to include @code{tupletdur} and @code{tupletrat} in all note events that might fall underneath the tuplets.
Specifying these settings in only a single event, for example, might cause FOMUS to overlook them.

This example shows tuplets being explicitly defined using the marks and settings introduced above:

@ifset fileexs
@fomusex{Explicitly Defined Tuplets, Ex, ex, fms, 071}
@end ifset
@ifset lispexs
@fomusex{Explicitly Defined Tuplets, Lsp, lsp, lisp, 063}
@end ifset
@ifset salexs
@fomusex{Explicitly Defined Tuplets, Sal, sal, sal, 062}
@end ifset

@c @subsection Tuplet Divisions
@c @exindex divisions
@c @exindex tuplet divisions

@c FOMUS uses two settings, @code{tuplet-divs} and @code{default-tupletdivs} to determine how tuplets are split or ``divided'' up
@c into smaller subdivisions.  Since they function exactly like @code{meas-divs} and @code{default-measdivs}, see @exref{Beats and Measures}
@c for a full explanation of how to use them.  An example of specifying how a quintuplet should be divided is shown below.

@c @ifset fileexs
@c @fomusex{Tuplet Divisions, Ex, ex, fms, 080}
@c @end ifset
@c @ifset lispexs
@c @fomusex{Tuplet Divisions, Lsp, lsp, lisp, 000}
@c @end ifset
@c @ifset salexs
@c @fomusex{Tuplet Divisions, Sal, sal, sal, 000}
@c @end ifset

@node Instruments (File), Percussion (File), Tuplets (File), `.fms' File Examples
@section Instruments
@exindex instruments

@subsection Defining Instruments

FOMUS has many built-in instruments, but you will probably want to modify some of them or define your own.
The electric viola instrument defined here uses the built-in @samp{viola} instrument as a template,
replacing the values of a few typical settings.  @code{name} and @code{abbr} set the name and abbreviated name of the instrument as it
should appear in the score.  @code{min-pitch} and @code{max-pitch} set the minimum and maximum pitch so that FOMUS prints warning messages if the 
pitches fall out of range.
@code{open-strings} is a list of pitches representing the open strings of the instrument, used by FOMUS to calculate notation for harmonics.

@ifset fileexs
@fomusex{Instrument Definition, Ex, ex, fms, 072}
@end ifset
@ifset lispexs
@fomusex{Instrument Definition, Lsp, lsp, lisp, 064}
@end ifset
@ifset salexs
@fomusex{Instrument Definition, Sal, sal, sal, 063}
@end ifset

The same instrument is defined inline inside the part in this example.

@ifset fileexs
@fomusex{Inline Instrument Definition, Ex, ex, fms, 073}
@end ifset
@ifset lispexs
@fomusex{Inline Instrument Definition, Lsp, lsp, lisp, 065}
@end ifset
@ifset salexs
@fomusex{Inline Instrument Definition, Sal, sal, sal, 064}
@end ifset

The same instrument is defined once again, only this time without using a template (i.e., the @code{template} parameter is missing).
Since the definition is not based on a built-in instrument, some essential pieces of information missing in the above examples must be provided
(the staff and clef definitions, which there are more examples of below).

@ifset fileexs
@fomusex{Templateless Instrument Definition, Ex, ex, fms, 074}
@end ifset
@ifset lispexs
@fomusex{Templateless Instrument Definition, Lsp, lsp, lisp, 066}
@end ifset
@ifset salexs
@fomusex{Templateless Instrument Definition, Sal, sal, sal, 065}
@end ifset

@subsection Instrument Library
@exindex instrument library
@exindex library of instruments

@ifset fileexs
If you find yourself reusing the same instrument definitions in multiple files, 
@end ifset
@ifclear fileexs
If you find yourself reusing the same instrument definitions, 
@end ifclear
you could insert something resembling the following in your @file{.fomus} file
located in your home directory (make sure you use @samp{+=} instead of @samp{=} to append the values to FOMUS's default list).
See the section below on defining staves in instruments for more on the @code{staves} parameter that appears in this example.

@example
inst-defs += (<id: ukulele name: "Ukulele" 
               staves: <clefs: <instclef: treble>>
               min-pitch: 60 max-pitch: 81
               open-strings: (67 60 64 69)>
              <id: banjo name: "Banjo" 
               staves: <clefs: <instclef: bass>>
               min-pitch: 67 max-pitch: 74
               open-strings: (67 50 55 59 62)>)
@end example

All of FOMUS's built-in instruments are contained in the file @code{fomus.conf}, which is located in @file{/@var{install_prefix}/shared/}
(@var{install_prefix} is most likely @file{/usr/local} or @file{/usr}).

@subsection Defining Staves in Instruments
@exindex staves

Below is an instrument definition that contains a grand staff and uses a treble and bass clef.
@code{staves} is followed by a list of two staff 
@ifset fileexs
definitions.
@end ifset
@ifset lispexs
definitions (each staff definition appears as smaller list inside the larger list).
@end ifset
@ifset salexs
definitions (each staff definition appears as smaller list inside the larger list).
@end ifset
The @code{clefs} parameter inside each staff definition is followed by a list of clef
@ifset fileexs
definitions,
@end ifset
@ifset lispexs
definitions (again, each clef definition appears as a smaller list),
@end ifset
@ifset salexs
definitions (again, each clef definition appears as a smaller list),
@end ifset
each of which actually represents a clef @emph{choice} in that staff.  
The @code{instclef} setting is mandatory and determines the clef sign that appears in the score.
Each of the two staves in the instrument below, then, are allowed to display either a treble or bass clef.
The first clef definition to appear in a list is the default clef, which means that in the example below, the default clef
for staff 1 (the top staff) is treble clef and the default for staff 2 (the bottom staff) is bass clef.
The @code{ledgers-up} and @code{ledgers-down} settings specify how many ledger lines should be allowed to appear before
FOMUS begins to consider switching staves or clefs.  @code{octs-up} and @code{octs-down} specify whether or not octave change signs
are allowed to appear (a value of 1 means an 8va sign is allowed while a value of 2 means 15va is allowed).
@code{clef-preference} affects the probability that FOMUS will choose that clef over other choices
(a value of 2, for example, doubles the chance of it being chosen while a value of 1/2 reduces it by one half).

@ifset fileexs
@fomusex{Staves and Clefs, Ex, ex, fms, 075}
@end ifset
@ifset lispexs
@fomusex{Staves and Clefs, Lsp, lsp, lisp, 067}
@end ifset
@ifset salexs
@fomusex{Staves and Clefs, Sal, sal, sal, 066}
@end ifset

The following example shows how to define an instrument with a grand staff made up of three staves.
Three staff objects are created, each one containing two clef objects representing the choices allowed in that staff.

@ifset fileexs
@fomusex{Instrument with Three Staves, Ex, ex, fms, 044}
@end ifset
@ifset lispexs
@fomusex{Instrument with Three Staves, Lsp, lsp, lisp, 023}
@end ifset
@ifset salexs
@fomusex{Instrument with Three Staves, Sal, sal, sal, 023}
@end ifset

@node Percussion (File), Beats and Measures (File), Instruments (File), `.fms' File Examples
@section Percussion
@exindex percussion instruments
@exindex instruments

@subsection Percussion Examples
@exindex percussion instrument changes
@exindex percussion instrument definitions
@exindex percussion notes/voices

Percussion instruments appearing on the same staff can be assigned notes and voices.
The percussion instrument ID is then specified instead of a pitch to place a note in the proper location.

To set up a group of percussion instruments for a part, you must create an @code{inst} object
that contains one or more @code{percinst} objects.  The following example shows a simple setup using the
@code{perc-note} setting in each percussion definition to assign to it a specific note on the staff.
Percussion instruments are defined separately and are included in the @samp{pinst} instrument by referencing their IDs.

@ifset fileexs
@fomusex{High/Low Woodblocks, Ex, ex, fms, 035}
@end ifset
@ifset lispexs
@fomusex{High/Low Woodblocks, Lsp, lsp, lisp, 009}
@end ifset
@ifset salexs
@fomusex{High/Low Woodblocks, Sal, sal, sal, 009}
@end ifset

The percussion instrument definitions are changed in this example so that the woodblocks are notated in separate voices.

@ifset fileexs
@fomusex{Percussion with Voice Assignments, Ex, ex, fms, 036}
@end ifset
@ifset lispexs
@fomusex{Percussion with Voice Assignments, Lsp, lsp, lisp, 010}
@end ifset
@ifset salexs
@fomusex{Percussion with Voice Assignments, Sal, sal, sal, 010}
@end ifset

The following uses inlined @code{percinst} and @code{inst} definitions but is otherwise equivalent to the example above:

@ifset fileexs
@fomusex{Inlined Percussion and Instrument Definitions, Ex, ex, fms, 063}
@end ifset
@ifset lispexs
@fomusex{Inlined Percussion and Instrument Definitions, Lsp, lsp, lisp, 055}
@end ifset
@ifset salexs
@fomusex{Inlined Percussion and Instrument Definitions, Sal, sal, sal, 054}
@end ifset

If @code{perc-name} is set inside a percussion instrument definition, FOMUS places this name above the staff whenever there
is a change from one percussion instrument to another.

@ifset fileexs
@fomusex{Percussion Changes, Ex, ex, fms, 064}
@end ifset
@ifset lispexs
@fomusex{Percussion Changes, Lsp, lsp, lisp, 056}
@end ifset
@ifset salexs
@fomusex{Percussion Changes, Sal, sal, sal, 055}
@end ifset

@subsection Percussion Library
@exindex percussion instrument library
@exindex library of percussion instruments

@ifset fileexs
If you find yourself reusing the same percussion instrument definitions in multiple files, 
@end ifset
@ifclear fileexs
If you find yourself reusing the same percussion instrument definitions, 
@end ifclear
you could insert something resembling the following in your @file{.fomus} file
located in your home directory (make sure you use @samp{+=} instead of @samp{=} to append the values to FOMUS's default list).

@example
percinst-defs += (<id cym, perc-note c4, perc-name "Cymbal">
                  <id bdr, perc-note c4, perc-name "B. Drum">)
@end example

All of FOMUS's built-in percussion instruments are contained in the file @code{fomus.conf}, which is located in @file{/@var{install_prefix}/shared/}
(@var{install_prefix} is most likely @file{/usr/local} or @file{/usr}).

@node Beats and Measures (File), Treating Multiple Parts as One (File), Percussion (File), `.fms' File Examples
@section Beats and Measures

@subsection Beats
@exindex beats

The @code{beat} setting specifies what rhythmic value is equal to one durational unit or ``beat.''  By default this value is 1/4, 
which means a duration of 1 is notated with a quarter note.  
@code{beat} must always be an integer or rational number whose denominator is a power of two (e.g., 1/8, 1/4, 1/2, 1 and 2 are valid values).
The following example shows the effect of changing @code{beat} to 1/8 (an eighth note).

@ifset fileexs
@fomusex{Beats Setting, Ex, ex, fms, 065}
@end ifset
@ifset lispexs
@fomusex{Beats Setting, Lsp, lsp, lisp, 057}
@end ifset
@ifset salexs
@fomusex{Beats Setting, Sal, sal, sal, 056}
@end ifset

If you change @code{beat} in the middle of a passage, FOMUS
adjusts by changing the time signature (i.e., FOMUS does not change the times or durations of measures to compensate---it changes the notation).

@ifset fileexs
@fomusex{Beats Setting in the Middle of a Passage, Ex, ex, fms, 037}
@end ifset
@ifset lispexs
@fomusex{Beats Setting in the Middle of a Passage, Lsp, lsp, lisp, 017}
@end ifset
@ifset salexs
@fomusex{Beats Setting in the Middle of a Passage, Sal, sal, sal, 017}
@end ifset

@subsection Measures
@exindex measures
@exindex time signatures

Measures in FOMUS are defined in a way similar to note events by specifying time and duration along with settings and values.
Measures only need to be defined when a change occurs (e.g., a change in the time or key signature) or you want to insure that a downbeat occurs at some specific time.
FOMUS fills in the remaining measures by repeating the measure defined by you and adjusting any that overlap or don't fit.

@ifset fileexs
@fomusex{Specifying a Measure, Ex, ex, fms, 066}
@end ifset
@ifset lispexs
@fomusex{Specifying a Measure, Lsp, lsp, lisp, 058}
@end ifset
@ifset salexs
@fomusex{Specifying a Measure, Sal, sal, sal, 057}
@end ifset

The duration of this measure is 3+1/2 instead of 3.  This is notated as an 7/8 measure:

@ifset fileexs
@fomusex{Specifying a 7/8 Measure, Ex, ex, fms, 067}
@end ifset
@ifset lispexs
@fomusex{Specifying a 7/8 Measure, Lsp, lsp, lisp, 059}
@end ifset
@ifset salexs
@fomusex{Specifying a 7/8 Measure, Sal, sal, sal, 058}
@end ifset

In the following example each small phrase begins on a downbeat.  FOMUS begins a new series of 3/4 measures at all of the specified locations 
while fitting and adjusting the remaining measures in the best way possible.

@ifset fileexs
@fomusex{Measures at Arbitrary Locations, Ex, ex, fms, 038}
@end ifset
@ifset lispexs
@fomusex{Measures at Arbitrary Locations, Lsp, lsp, lisp, 015}
@end ifset
@ifset salexs
@fomusex{Measures at Arbitrary Locations, Sal, sal, sal, 015}
@end ifset

When FOMUS needs to create a new measure or delete one to work around the user's explicitly defined measures, it does so
according to the @code{min-measdur} setting.  @code{min-measdur} represents the duration of the smallest measure FOMUS is allowed to create.

@ifset fileexs
@fomusex{Minimum Measure Duration, Ex, ex, fms, 076}
@end ifset
@ifset lispexs
@fomusex{Minimum Measure Duration, Lsp, lsp, lisp, 068}
@end ifset
@ifset salexs
@fomusex{Minimum Measure Duration, Sal, sal, sal, 067}
@end ifset

@subsection Compound Meter
@exindex compound meter

@ifset fileexs
Compound meter is specified by setting @code{comp} to @samp{yes}.
@end ifset
@ifset lispexs
Compound meter is specified by setting @code{comp} to @samp{t}.
@end ifset
@ifset salexs
Compound meter is specified by setting @code{comp} to @samp{#t}.
@end ifset
The @code{beat} setting is then interpretted as a dotted value.  
For example, in compound meter a @code{beat} setting of 1/4 means a duration of 1 is notated as a dotted quarter note.

@ifset fileexs
@fomusex{Specifying Compound Meter, Ex, ex, fms, 068}
@end ifset
@ifset lispexs
@fomusex{Specifying Compound Meter, Lsp, lsp, lisp, 060}
@end ifset
@ifset salexs
@fomusex{Specifying Compound Meter, Sal, sal, sal, 059}
@end ifset

@subsection Time Signatures
@exindex time signatures

FOMUS automatically calculates the time signature that appears in the score.
This calcaulation can be influenced by changing the value of @code{timesig-den}.
Setting this to 8 (and @code{beat} to 1/4), for example, 
causes measures of duration 2 to be notated with 4/8 time signatures, measures of duration 3 to be notated with 6/8, etc..
FOMUS changes this to a higher multiple of two if necessary. For example, if @code{timesig-den} is 4 then measures of duration 4+1/4 are notated
with 17/16 time signatures.

@ifset fileexs
@fomusex{Time Signature Denominator Setting, Ex, ex, fms, 039}
@end ifset
@ifset lispexs
@fomusex{Time Signature Denominator Setting, Lsp, lsp, lisp, 016}
@end ifset
@ifset salexs
@fomusex{Time Signature Denominator Setting, Sal, sal, sal, 016}
@end ifset
@ifset lispexs
@fomusex{Another Time Signature Denominator Setting, Lsp, lsp, lisp, 069}
@end ifset
@ifset salexs
@fomusex{Another Time Signature Denominator Setting, Sal, sal, sal, 068}
@end ifset

@subsection Explicit Time Signatures
@exindex time signatures

Use the @code{timesig} setting if you want to explicitly specify a time signature.  
When you do this, FOMUS ignores the duration attribute and calculates the duration of the measure from the time signature.

@ifset fileexs
@fomusex{Explicit Time Signatures, Ex, ex, fms, 040}
@end ifset
@ifset lispexs
@fomusex{Explicit Time Signatures, Lsp, lsp, lisp, 018}
@end ifset
@ifset salexs
@fomusex{Explicit Time Signatures, Sal, sal, sal, 018}
@end ifset

@subsection Measure Divisions
@exindex divisions
@exindex measure divisions

FOMUS uses two settings, @code{meas-divs} and @code{default-measdivs} to determine how a measure is split or ``divided'' up 
into smaller subdivisions.  These subdivisions have a direct influence on how notes are split, tied and beamed, and can
be controlled so that the right meter is represented in the score.

@code{meas-divs} and @code{default-measdivs} both contain lists of durations that specify two or more divisions (one division doesn't make any sense).
For example, the list @samp{(2 2)} specifies that a measure with a duration of 4 should be divided in half (this represents a typical duple meter).  
@samp{(3 2)} specifies that a measure with a duration of 5 be divided into a 3 + 2 measure.  In @code{meas-divs} you can actually specify one or more of these 
lists---FOMUS then chooses the division that produces the least complex result (i.e., the least number of tied notes and tuplets).
For example, setting @code{meas-divs} to @samp{((3 2) (2 3))} tells FOMUS that it may choose to divide 5 beats into 3 + 2 or 2 + 3 depending
on which one is most suitable.  

@ifset fileexs
@fomusex{Measure Divisions, Ex, ex, fms, 080}
@end ifset
@ifset lispexs
@fomusex{Measure Divisions, Lsp, lsp, lisp, 071}
@end ifset
@ifset salexs
@fomusex{Measure Divisions, Sal, sal, sal, 070}
@end ifset

@code{meas-divs} should usually be placed in a measure definition and should only specify divisions specific to that measure.
To modify all possible divisions for any measure of any duration use the @code{default-measdivs} setting.

@ifset fileexs
@fomusex{Default Measure Divisions, Ex, ex, fms, 081}
@end ifset
@ifset lispexs
@fomusex{Default Measure Divisions, Lsp, lsp, lisp, 072}
@end ifset
@ifset salexs
@fomusex{Default Measure Divisions, Sal, sal, sal, 071}
@end ifset

To change FOMUS's default measure divisions you can also set @code{default-measdivs} in
your @file{.fomus} file located in your home directory.

In most cases, FOMUS uses the same settings to subdivide a measure further after it has initially divided it.
For example, once it has divided 5 beats into 3 + 2 beats, it should further subdivide the 3 beats into either 2 + 1, 1 + 2 or 1 + 1 + 1 beats (according
to FOMUS's built-in choices).
If FOMUS can't find a suitable list of divisions (i.e., the right duration is missing from @code{meas-divs} or @code{default-measdivs}) it multiplies and/or
divides by 2 until it does find one.  For example, it might use @samp{(3 2)} 
to divide 2+1/2 beats into 1+1/2 + 1 if no other list of divisions is provided for a duration of 2+1/2 beats.  
This allows @samp{(3 2)} to cover measures with 5/8, 5/4 and 5/2 time signatures, for example, regardless of what the value of @code{beat} is.

If you are trying to notate any unusual metrical divisions, these features might cause a few subtle quirks.  
In the first example below, the 1+1/2 + 1+1/2 division specified in @code{meas-divs} causes two further 3/4 + 3/4 subdivisions.  Since FOMUS does not
have a built-in rule for dividing 1+1/2 beats it derives @samp{(3/4 3/4)} from @samp{(1+1/2 1+1/2)} and from this divides each 1+1/2 beat division in half.
This is what is causing the strange pattern of rests in the measure below.  The problem can be alleviated by providing instructions on how to divide 1+1/2 beats.

@ifset fileexs
@fomusex{Strange Measure Divisions, Ex, ex, fms, 078}
@end ifset
@ifset lispexs
@fomusex{Strange Measure Divisions, Lsp, lsp, lisp, 073}
@end ifset
@ifset salexs
@fomusex{Strange Measure Divisions, Sal, sal, sal, 072}
@end ifset

If there is more than one part, FOMUS tries to divide simultaneous measures the same way.  For example, 10 measures starting at time 0 with 5/4 time signatures are
all notated as either 3 + 2 or 2 + 3.  If you want the possibility of different parts being divided differently, you can assign parts to special metrical groups
using the setting @code{divgroup}.  Basically, all parts with the same @code{divgroup} ID are divided the same way, and parts with different @code{divgroup} IDs
can be divided differently.

TODO: not implemented yet

@c @ifset fileexs
@c @fomusex{Measure Divisions, Ex, ex, fms, 082}
@c @end ifset
@c @ifset lispexs
@c @fomusex{Measure Divisions, Lsp, lsp, lisp, 000}
@c @end ifset
@c @ifset salexs
@c @fomusex{Measure Divisions, Sal, sal, sal, 000}
@c @end ifset

@ifset fileexs
@subsection Measure Definitions

The examples above all use measure ``events,'' which, like note and rest events, have times and durations.
If you place a large number of settings inside them, you might end up cutting and pasting cumbersome measure definitions over and over again.
This can be avoided by defining one or more @code{measdef} objects, which store settings and values in one location and attach IDs to them.
The IDs may then be used when specifying measure events.

@ifset fileexs
@fomusex{@code{measdef} Objects, Ex, ex, fms, 077}
@end ifset

The @code{measdur} setting inside a measure definition overrides the duration attribute (in the same way that @code{timesig} does) 
and fixes the duration of the measure.

@c @ifset fileexs
@c @fomusex{@code{measdef} Objects, Ex, ex, fms, 077}
@c @end ifset
@c @end ifset

TODO: example
@end ifset

@node Treating Multiple Parts as One (File), Score Layout (File), Beats and Measures (File), `.fms' File Examples
@section Treating Multiple Parts as One

@subsection Metapart Example
@exindex metaparts
@exindex parts

You can treat multiple instruments as one by defining a ``metapart.''
Metaparts don't appear in the score.  Instead, they route events to other parts or metaparts according to which voices
they are in.  The @code{from-voice} and @code{to-voice} settings tell FOMUS how to do this.  In the example below, events belonging to voice 1
in the @samp{vla} metapart are routed to voice 1 of @samp{vla1}, events in voice 2 are routed to @samp{vla2} and events in voice 3 are
routed to @samp{vla3}.  This is done after one of the three voices (1, 2 or 3) has been chosen for each note.  Defining the @samp{vla} metapart
this way allows the events for the three viola parts to be entered as chords instead of as separate melodic lines.

@ifset fileexs
@fomusex{Viola Trio Metapart, Ex, ex, fms, 041}
@end ifset
@ifset lispexs
@fomusex{Viola Trio Metapart, Lsp, lsp, lisp, 024}
@end ifset
@ifset salexs
@fomusex{Viola Trio Metapart, Sal, sal, sal, 024}
@end ifset

TODO: show nested metaparts with transpositions

@node Score Layout (File), Microtonal Notation (File), Treating Multiple Parts as One (File), `.fms' File Examples
@section Score Layout

@subsection Layouts
@exindex layout
@exindex score layout
@exindex orchestral layout
@exindex ensemble layout
@exindex parts layout

FOMUS's built-in @samp{orchestra} layout is shown here.  
Setting @code{layout} to @samp{orchestra} effectively sorts the parts and groups them so that they appear as they should in an orchestral score.

@ifset fileexs
@fomusex{Orchestra Layout, Ex, ex, fms, 042}
@end ifset
@ifset lispexs
@fomusex{Orchestra Layout, Lsp, lsp, lisp, 011}
@end ifset
@ifset salexs
@fomusex{Orchestra Layout, Sal, sal, sal, 011}
@end ifset

The layout is changed to @samp{small-ensemble} in this example.

@ifset fileexs
@fomusex{Ensemble Layout, Ex, ex, fms, 043}
@end ifset
@ifset lispexs
@fomusex{Ensemble Layout, Lsp, lsp, lisp, 012}
@end ifset
@ifset salexs
@fomusex{Ensemble Layout, Sal, sal, sal, 012}
@end ifset

The two default layouts shown above only work if you also use FOMUS's built-in instruments.
If you define new instruments (with IDs that are different from the built-in ones) and want to order and group them correctly, or
you want a different layout than the default built-in ones, you must set either @code{layout-def} or @code{layout-defs}.
A simple example is shown below:

@ifset fileexs
@fomusex{Layout Definition, Ex, ex, fms, 079}
@end ifset
@ifset lispexs
@fomusex{Layout Definition, Lsp, lsp, lisp, 070}
@end ifset
@ifset salexs
@fomusex{Layout Definition, Sal, sal, sal, 069}
@end ifset

In @code{layout-def}, instrument IDs are listed in the order they should appear in the score.
Instruments are grouped together with a bracket on the left side of the staff system by surrounding the IDs with @samp{[} and @samp{]} (they can also be nested).
The @samp{*} indicates the location where tempo markings and other system-wide marks may appear (there's no need to put a @samp{*} at beginning of the list---FOMUS 
always places these marks at the top of the system in addition to the locations you specify).

@subsection Layout Library
@exindex layout library
@exindex score layout library
@exindex parts layout library
@exindex library of score layouts

@ifset fileexs
If you find yourself reusing the same layouts in multiple files
@end ifset
@ifclear fileexs
If you find yourself reusing the same layouts
@end ifclear
or need to redefine layouts to include your own custom instruments,
you could insert something resembling the following in your @file{.fomus} file
located in your home directory (make sure you use @samp{+=} instead of @samp{=} to append the values to FOMUS's default list).

@example
layout-defs += (myorchlayout: ([ [ piccolo flute ]
                                 [ oboe english-horn ]
                                 [ bflat-clarinet bass-clarinet ]
                               ]
                               *
                               [ [ violin ]
                                 [ viola ]
                                 [ cello ]
                                 [ contrabass ]
                               ]))
@end example

After you do this, you can then set @code{layout} to @samp{myorchlayout} to specify your custom layout.

@node Microtonal Notation (File),  , Score Layout (File), `.fms' File Examples
@section Microtonal Notation

@subsection Quartertones
@exindex microtones
@exindex quartertones

@ifset fileexs
To make it possible for FOMUS to output quartertones, set @code{quartertones} to @samp{yes}.
@end ifset
@ifset lispexs
To make it possible for FOMUS to output quartertones, set @code{quartertones} to @samp{t}.
@end ifset
@ifset salexs
To make it possible for FOMUS to output quartertones, set @code{quartertones} to @samp{#t}.
@end ifset

@ifset fileexs
@fomusex{Quartertone Melody, Ex, ex, fms, 045}
@end ifset
@ifset lispexs
@fomusex{Quartertone Melody, Lsp, lsp, lisp, 003}
@end ifset
@ifset salexs
@fomusex{Quartertone Melody, Sal, sal, sal, 003}
@end ifset
@ifset salexs
@fomusex{Spectral, Sal, sal, sal, 014}
@end ifset

@clear fileexs
